{"version":3,"sources":["Todo.js","NewTodoForm.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isEditing","text","handleToggle","bind","assertThisInitialized","handleDelete","handleEdit","handleChange","handleSubmit","e","preventDefault","toggleTodo","id","removeTodo","setState","objectSpread","target","value","updateTodo","output","react_default","a","createElement","Fragment","onSubmit","name","type","onChange","className","complete","onClick","Component","NewTodoForm","addTodo","uuid","TodoList","todos","todo","newTodo","concat","toConsumableArray","newTodos","map","filter","_this2","src_Todo_0","key","src_NewTodoForm_0","App","src_TodoList_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3227e429.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Todo.css';\n\nclass Todo extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      isEditing: false,\n      text: props.text\n    }\n    this.handleToggle = this.handleToggle.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleEdit = this.handleEdit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleToggle(e) {\n    e.preventDefault();\n    this.props.toggleTodo(this.props.id);\n  }\n\n  handleDelete(e) {\n    e.preventDefault();\n    this.props.removeTodo(this.props.id);\n  }\n\n  handleEdit(e) {\n    e.preventDefault();\n    this.setState({isEditing: true});\n  }\n\n  handleChange(e) {\n    this.setState({\n      ...this.state,\n      text: e.target.value\n    })\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.props.updateTodo(this.props.id, this.state.text);\n    this.setState({\n      ...this.state,\n      isEditing: false\n    });\n  }\n\n  render() {\n    let output;\n    if(this.state.isEditing) {\n      output = (\n        <>\n          <form onSubmit={this.handleSubmit}>\n            <input \n              name=\"text\" \n              type=\"text\" \n              value={this.state.text}\n              onChange={this.handleChange}\n            />\n            <input type=\"submit\" value=\"save\" />\n          </form>\n        </>\n        );\n    } else {\n      output = (\n        <>\n          <p\n            className={this.props.complete ? \"Todo-Complete\" : \"\"}\n            onClick={this.handleToggle}\n          >\n          {this.props.text}\n          </p>\n          <button onClick={this.handleEdit}>Edit</button>\n          <button onClick={this.handleDelete}>delete</button>\n        </>\n      );\n    };\n\n    return (\n      <div>\n        {output}\n      </div>\n    );\n  }\n}\n\nexport default Todo;\n","import React, { Component } from 'react';\nimport './NewTodoForm.css';\nimport uuid from \"uuid/v4\";\n\nclass NewTodoForm extends Component {\n  constructor() {\n    super();\n    this.state = { text: \"\"};\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({text: e.target.value});\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.props.addTodo({...this.state, id: uuid() });\n    this.setState({text: \"\"});\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input \n        type=\"text\" \n        name=\"text\"\n        value={this.state.text}\n        onChange={this.handleChange}\n        />\n        <input type=\"submit\" value=\"Add Todo\" />\n      </form>\n    );\n  }\n\n}\n\nexport default NewTodoForm;\n","import React, { Component } from 'react';\nimport './TodoList.css';\nimport Todo from './Todo';\nimport NewTodoForm from './NewTodoForm';\n\nclass TodoList extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todos: [\n        {id: \"1\", text: \"test\", complete: false}, \n        {id: \"2\", text: \"another test\", complete: true}\n      ]\n    };\n    this.addTodo = this.addTodo.bind(this);\n    this.toggleTodo = this.toggleTodo.bind(this);\n    this.removeTodo = this.removeTodo.bind(this);\n    this.updateTodo = this.updateTodo.bind(this);\n  }\n\n  addTodo(todo) {\n    const newTodo = {\n      ...todo,\n      complete: false\n    };\n    this.setState({\n      todos: [...this.state.todos, newTodo]\n    });\n  }\n\n  toggleTodo(id) {\n    const newTodos = this.state.todos.map(todo => {\n      if(todo.id === id) {\n        return {\n          ...todo,\n          complete: !todo.complete\n        }\n      }\n      return todo;\n    })\n    this.setState({todos: newTodos});\n  }\n\n  removeTodo(id) {\n    this.setState({\n      todos: this.state.todos.filter(todo => todo.id !== id)\n    })\n  }\n\n  updateTodo(id, text) {\n    this.setState({\n      todos: this.state.todos.map(todo => {\n        if(todo.id === id) {\n          return {\n            ...todo,\n            text: text\n          }\n        }\n        return todo;\n      })\n    });\n  }\n\n  render() {\n    const todos = this.state.todos.map((todo) => (\n      <Todo\n        key={todo.id}\n        id={todo.id}\n        text={todo.text}\n        complete={todo.complete}\n        toggleTodo={this.toggleTodo}\n        removeTodo={this.removeTodo}\n        updateTodo={this.updateTodo}\n      />\n    ));\n\n    return (\n      <div>\n        <ul>{ todos }</ul>\n        <NewTodoForm addTodo={this.addTodo}/>\n      </div>\n    );\n  }\n}\n\nexport default TodoList;\n","import React from 'react';\nimport './App.css';\nimport TodoList from './TodoList';\n\nfunction App() {\n  return (\n    <TodoList />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}